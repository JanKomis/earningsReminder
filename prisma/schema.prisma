// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Stock {
  id            String   @id @default(cuid())
  ticker        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expirationDay String //????????????
  exchange      String //name of exchange
  name          String //name of stock
  earningsDate  DateTime //exact date of earnings
  earningsStart DateTime //the range of when earnings will be announced
  earningsEnd   DateTime //the range of when earnings will be announced

  dividendDate DateTime? //if stock pays dividends
  marketCap    Int

  priceEOD  Float //end of day price
  volumeEOD Int //end of day volume 

  priceLow7         Float //min. price during 7 days
  priceRange7       Float //range between min and max. price during 7 days
  percPriceRange7   Float //(priceRange7 / 2)/((priceLow7 +(priceRange7 / 2))*0.01)
  dailyRangeMedian7 Float //median calculated from the price range (daily low and hight) during 7 days
  volumeMedian7     Int //median calculated from the volume during 7 days

  priceLow30         Float //min. price during 30 days
  priceRange30       Float //range between min and max. price during 30 days
  percPriceRange30   Float //(priceRange30 / 2)/((priceLow30 +(priceRange30 / 2))*0.01)
  dailyRangeMedian30 Float //median calculated from the daily price range during 30 days
  volumeMedian30     Float //median calculated from the volume during 30 days
}

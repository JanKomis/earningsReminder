// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Watchlist?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Stock {
  id               String    @id @default(cuid())
  ticker           String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  expirationDay    String //when weekly options expiry
  exchange         String //name of exchange
  exchangeTimezone String //timezone exchange
  name             String //name of stock
  earningsDate     DateTime? //exact date of earnings
  earningsStart    DateTime? //the range of when earnings will be announced
  earningsEnd      DateTime? //the range of when earnings will be announced
  dividendDate     DateTime? //if stock pays dividends
  marketCap        BigInt
  priceEOD         Float //end of day price
  volumeEOD        Int //end of day volume 

  calculateParams CalculateParams[]
  watchlists      Watchlist[]
}

model Watchlist {
  id     String  @id @default(cuid())
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
  stocks Stock[]
}

model CalculateParams {
  id                  String @id @default(cuid())
  stockId             String
  duration            Int
  lowPrice            Float //lowest price in the period
  range               Float //the difference between the max and min price in that period
  rangePercent        Float //half range vs stock price in percent
  aritMeanDailyRange  Float //aritmetic mean of daily range
  varianceDailyRange  Float //variance mean of daily range
  meanDevDailyRange   Float //mean deviation of daily range
  coefVarDailyRange   Float //coefficient of variationn of daily range
  aritMeanDailyVolume Float //aritmetic mean of daily volume
  varianceDailyVolume Float //variance mean of daily volume
  meanDevDailyVolume  Float //mean deviation of daily volume
  coefVarDailyVolume  Float //coefficient of variationn of daily volume

  stock Stock @relation(fields: [stockId], references: [id], onDelete: Cascade) // relation to Stock
}
